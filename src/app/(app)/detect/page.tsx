import { Suspense } from 'react';
import { generateAccountRiskAnalysis } from '@/ai/flows/generate-account-risk-analysis';
import { DetectionWidget } from '@/components/detection-widget';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Progress } from '@/components/ui/progress';

type RiskLevel = {
    level: string;
    description: string;
    color: string;
    bgColor: string;
};

function getRiskLevel(score: number): RiskLevel {
  if (score <= 25) return { level: 'Low Risk', description: 'Highly likely authentic account', color: 'text-green-600 dark:text-green-400', bgColor: 'bg-green-500' };
  if (score <= 60) return { level: 'Medium Risk', description: 'Some suspicious indicators present', color: 'text-yellow-600 dark:text-yellow-400', bgColor: 'bg-yellow-500' };
  if (score <= 85) return { level: 'High Risk', description: 'Multiple red flags detected', color: 'text-orange-600 dark:text-orange-400', bgColor: 'bg-orange-500' };
  return { level: 'Critical Risk', description: 'Almost certainly fake/malicious', color: 'text-red-600 dark:text-red-400', bgColor: 'bg-red-500' };
}

async function AnalysisResult({ platform, accountIdentifier }: { platform: string; accountIdentifier: string }) {
  const result = await generateAccountRiskAnalysis({ platform, accountIdentifier });
  const risk = getRiskLevel(result.riskScore);

  return (
    <Card className="mt-8">
      <CardHeader>
        <CardTitle>Analysis for <span className="text-primary">{accountIdentifier}</span> on {platform}</CardTitle>
        <CardDescription>Generated by SocialGuard AI</CardDescription>
      </CardHeader>
      <CardContent className="grid grid-cols-1 md:grid-cols-3 gap-8">
        <div className="flex flex-col items-center justify-center p-6 border rounded-lg">
            <h3 className="text-lg font-medium text-muted-foreground">Risk Score</h3>
            <p className={`text-7xl font-bold my-4 ${risk.color}`}>{result.riskScore}</p>
            <Progress value={result.riskScore} className="w-full h-3" />
            <div className={`mt-4 text-center font-semibold text-xl ${risk.color}`}>
                {risk.level}
            </div>
            <p className="text-sm text-muted-foreground mt-1 text-center">{risk.description}</p>
        </div>
        <div className="md:col-span-2">
            <h3 className="font-semibold text-lg">Analysis Report</h3>
            <p className="mt-2 text-muted-foreground whitespace-pre-wrap leading-relaxed">{result.analysisReport}</p>
        </div>
      </CardContent>
    </Card>
  );
}

function LoadingSkeleton() {
    return (
        <Card className="mt-8">
            <CardHeader>
                <div className="h-8 bg-muted rounded w-3/4 animate-pulse"></div>
                <div className="h-4 bg-muted rounded w-1/4 mt-2 animate-pulse"></div>
            </CardHeader>
            <CardContent className="grid grid-cols-1 md:grid-cols-3 gap-8">
                <div className="flex flex-col items-center justify-center p-6 border rounded-lg">
                    <div className="h-6 bg-muted rounded w-24 animate-pulse"></div>
                    <div className="h-20 bg-muted rounded w-20 my-4 animate-pulse"></div>
                    <div className="h-3 bg-muted rounded w-full animate-pulse"></div>
                    <div className="h-6 bg-muted rounded w-32 mt-4 animate-pulse"></div>
                    <div className="h-4 bg-muted rounded w-40 mt-1 animate-pulse"></div>
                </div>
                <div className="md:col-span-2">
                    <div className="h-6 bg-muted rounded w-32 mb-4 animate-pulse"></div>
                    <div className="space-y-2">
                        <div className="h-4 bg-muted rounded w-full animate-pulse"></div>
                        <div className="h-4 bg-muted rounded w-full animate-pulse"></div>
                        <div className="h-4 bg-muted rounded w-5/6 animate-pulse"></div>
                        <div className="h-4 bg-muted rounded w-full animate-pulse"></div>
                        <div className="h-4 bg-muted rounded w-3/4 animate-pulse"></div>
                    </div>
                </div>
            </CardContent>
        </Card>
    )
}

export default function DetectPage({
  searchParams,
}: {
  searchParams?: { platform?: string; accountIdentifier?: string };
}) {
  const platform = searchParams?.platform;
  const accountIdentifier = searchParams?.accountIdentifier;
  const shouldAnalyze = platform && accountIdentifier;

  return (
    <>
      <div>
        <h1 className="text-lg font-semibold md:text-2xl">Detect Account</h1>
        <p className="text-muted-foreground">Enter a username or profile URL to start an analysis.</p>
      </div>
      <Card>
        <CardContent className="pt-6">
            <DetectionWidget />
        </CardContent>
      </Card>

      {shouldAnalyze && (
        <Suspense fallback={<LoadingSkeleton />}>
          <AnalysisResult platform={platform} accountIdentifier={accountIdentifier} />
        </Suspense>
      )}
    </>
  );
}